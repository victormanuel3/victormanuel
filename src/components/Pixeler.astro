---
export interface Props {
  vector: 'code' | 'uiux';
  pixelColor?: string;
  animationEnabled?: boolean;
}

const { vector, pixelColor = '#9F9F9F', animationEnabled = true } = Astro.props;

const codeCoordinates = [
  [54, 39], [58, 35], [16, 39], [14, 37], [12, 35], [6, 17], [16, 15], [18, 13],
  [20, 11], [18, 9], [16, 7], [14, 9], [12, 11], [10, 13], [8, 15], [14, 17],
  [12, 19], [4, 19], [10, 21], [18, 33], [6, 19], [0, 23], [70, 23], [18, 11],
  [18, 35], [16, 31], [14, 29], [12, 27], [10, 25], [8, 23], [18, 37], [20, 35],
  [10, 33], [8, 31], [6, 29], [4, 27], [2, 21], [2, 25], [2, 23], [64, 19],
  [64, 21], [62, 21], [60, 21], [58, 19], [56, 17], [54, 15], [52, 13], [50, 11],
  [52, 9], [54, 7], [56, 9], [58, 11], [60, 13], [62, 15], [62, 17], [60, 17],
  [60, 15], [62, 19], [60, 19], [58, 17], [58, 15], [58, 13], [56, 15], [56, 13],
  [56, 11], [54, 9], [54, 11], [54, 13], [52, 11], [64, 17], [66, 19], [66, 23],
  [64, 23], [66, 25], [64, 25], [6, 21], [6, 23], [6, 25], [6, 27], [4, 21],
  [4, 23], [4, 25], [8, 17], [8, 19], [8, 21], [8, 25], [8, 27], [8, 29],
  [10, 27], [10, 29], [10, 31], [12, 29], [12, 31], [12, 33], [14, 31], [14, 33],
  [14, 35], [16, 33], [16, 35], [16, 37], [10, 15], [10, 17], [10, 19], [12, 13],
  [12, 15], [12, 17], [14, 11], [14, 13], [14, 15], [16, 9], [16, 11], [16, 13],
  [64, 27], [62, 25], [62, 27], [62, 29], [60, 27], [60, 29], [58, 29], [66, 21],
  [68, 21], [62, 23], [60, 25], [58, 27], [56, 29], [54, 31], [56, 31], [58, 31],
  [60, 31], [68, 23], [68, 25], [66, 27], [64, 29], [62, 31], [60, 33], [58, 33],
  [56, 33], [54, 33], [52, 33], [52, 35], [56, 35], [54, 35], [56, 37], [50, 35],
  [52, 37], [54, 37], [30, 46], [28, 46], [26, 45], [28, 34], [34, 34], [32, 33],
  [30, 32], [38, 21], [36, 21], [38, 23], [36, 13], [36, 15], [38, 13], [38, 15],
  [40, 2], [38, 7], [24, 44], [46, 2], [46, 4], [44, 1], [40, 4], [42, 0],
  [42, 2], [44, 3], [44, 5], [44, 7], [44, 9], [42, 4], [42, 6], [40, 6],
  [40, 8], [42, 8], [42, 10], [38, 9], [38, 11], [40, 10], [40, 12], [42, 12],
  [42, 14], [40, 14], [40, 16], [40, 18], [40, 20], [34, 18], [34, 20], [36, 17],
  [36, 19], [38, 17], [38, 19], [38, 25], [32, 23], [34, 22], [36, 23], [34, 24],
  [36, 25], [34, 26], [36, 27], [36, 29], [36, 31], [32, 25], [32, 27], [34, 28],
  [34, 30], [34, 32], [30, 28], [32, 29], [32, 31], [30, 30], [26, 39], [34, 36],
  [30, 34], [32, 35], [28, 36], [30, 36], [32, 37], [30, 38], [28, 38], [32, 39],
  [32, 41], [30, 40], [28, 40], [30, 42], [28, 42], [26, 43], [28, 44], [26, 41],
  [30, 44]
];

const uiuxCoordinates = [
  [27, 24], [29, 24], [31, 24], [33, 40], [31, 40], [41, 26], [29, 40], [27, 40],
  [43, 34], [35, 42], [33, 42], [43, 32], [43, 30], [45, 40], [45, 38], [45, 36],
  [45, 34], [45, 32], [45, 30], [45, 28], [29, 44], [31, 44], [43, 28], [43, 26],
  [31, 42], [29, 42], [27, 42], [43, 42], [41, 42], [43, 40], [39, 44], [37, 44],
  [43, 36], [37, 42], [41, 44], [35, 44], [33, 44], [45, 42], [47, 40], [47, 38],
  [47, 36], [47, 34], [47, 32], [47, 30], [47, 28], [47, 42], [49, 40], [49, 38],
  [49, 36], [49, 34], [49, 32], [49, 30], [49, 28], [49, 42], [51, 40], [51, 38],
  [51, 36], [51, 34], [51, 32], [51, 30], [51, 28], [51, 42], [53, 40], [53, 38],
  [53, 36], [53, 34], [53, 32], [53, 30], [53, 28], [53, 42], [45, 48], [45, 46],
  [45, 44], [45, 50], [47, 48], [47, 46], [47, 44], [47, 50], [49, 48], [49, 46],
  [49, 44], [53, 44], [51, 44], [49, 50], [47, 52], [49, 52], [47, 54], [51, 50],
  [53, 48], [52, 53], [50, 55], [48, 57], [54, 51], [56, 49], [58, 47], [60, 45],
  [46, 59], [50, 57], [53, 62], [53, 64], [55, 62], [55, 64], [57, 60], [57, 62],
  [55, 58], [55, 60], [57, 56], [57, 58], [59, 58], [59, 60], [53, 58], [53, 60],
  [59, 54], [59, 56], [61, 56], [61, 58], [63, 54], [63, 56], [65, 52], [65, 54],
  [67, 52], [61, 52], [61, 54], [63, 50], [63, 52], [52, 55], [54, 53], [56, 51],
  [58, 49], [60, 47], [46, 61], [53, 66], [51, 64], [49, 62], [51, 60], [59, 52],
  [55, 56], [57, 54], [65, 50], [61, 50], [63, 48], [51, 62], [62, 45], [48, 59],
  [53, 46], [55, 46], [51, 46], [51, 48], [55, 42], [55, 40], [55, 38], [55, 36],
  [55, 34], [55, 32], [55, 30], [55, 44], [57, 42], [57, 40], [57, 38], [57, 36],
  [57, 34], [57, 44], [39, 56], [41, 56], [43, 56], [45, 56], [37, 56], [35, 56],
  [43, 44], [29, 46], [31, 46], [39, 46], [37, 46], [41, 46], [35, 46], [33, 46],
  [43, 46], [29, 48], [31, 48], [39, 48], [37, 48], [41, 48], [35, 48], [33, 48],
  [43, 48], [29, 50], [31, 50], [39, 50], [37, 50], [41, 50], [35, 50], [33, 50],
  [43, 50], [29, 52], [31, 52], [39, 52], [37, 52], [41, 52], [35, 52], [33, 52],
  [43, 52], [31, 54], [33, 54], [41, 54], [39, 54], [43, 54], [37, 54], [35, 54],
  [45, 54], [45, 52], [31, 26], [27, 30], [27, 32], [33, 28], [29, 32], [33, 26],
  [25, 32], [33, 24], [35, 26], [27, 34], [29, 34], [31, 34], [35, 28], [35, 30],
  [37, 30], [31, 36], [29, 36], [27, 36], [37, 28], [37, 26], [31, 38], [39, 30],
  [33, 36], [37, 32], [39, 32], [33, 38], [39, 28], [29, 38], [27, 38], [39, 26],
  [41, 28], [41, 32], [41, 30], [29, 26], [31, 28], [33, 30], [35, 32], [33, 34],
  [31, 32], [29, 30], [27, 28], [25, 26], [25, 28], [25, 30], [21, 23], [19, 23],
  [17, 23], [17, 25], [15, 25], [15, 27], [13, 27], [13, 29], [11, 31], [11, 33],
  [9, 33], [7, 39], [5, 39], [5, 41], [5, 43], [3, 43], [3, 45], [3, 47],
  [1, 47], [1, 49], [1, 51], [9, 35], [9, 37], [7, 37], [13, 31], [21, 21],
  [21, 19], [21, 17], [21, 15], [21, 13], [23, 21], [23, 19], [19, 21], [19, 19],
  [19, 17], [19, 15], [23, 17], [23, 15], [17, 19], [17, 17], [25, 19], [25, 17],
  [25, 15], [27, 15], [27, 13], [29, 15], [29, 13], [31, 13], [31, 11], [33, 11],
  [33, 9], [35, 9], [37, 9], [37, 7], [39, 7], [39, 5], [41, 7], [41, 5],
  [43, 5], [43, 3], [45, 3], [45, 5], [47, 3], [49, 1], [49, 3], [53, 1], [51, 1]
];

const getCoordinates = (vectorType: string) => {
  switch (vectorType) {
    case 'code':
      return codeCoordinates;
    case 'uiux':
      return uiuxCoordinates;
    default:
      return codeCoordinates;
  }
};

const coordinates = getCoordinates(vector);

const calculateDimensions = (coords: number[][]) => {
  const maxX = Math.max(...coords.map(([x]) => x));
  const maxY = Math.max(...coords.map(([, y]) => y));
  return { width: maxX + 1, height: maxY + 1 };
};

const dimensions = calculateDimensions(coordinates);
const canvasWidth = dimensions.width;
const canvasHeight = dimensions.height;

const canvasId = `pixel-canvas-${Math.random().toString(36).substr(2, 9)}`;
---

<canvas 
  id={canvasId}
  width={canvasWidth}
  height={canvasHeight}
  style={`width: ${canvasWidth}px; height: ${canvasHeight}px; image-rendering: pixelated; opacity: 1; transition: opacity 0.3s ease-in-out;`}
></canvas>

<script define:vars={{ coordinates, pixelColor, canvasWidth, canvasHeight, canvasId, animationEnabled }}>
  const canvas = document.getElementById(canvasId);
  const ctx = canvas.getContext('2d');
  
  ctx.imageSmoothingEnabled = false;
  ctx.webkitImageSmoothingEnabled = false;
  ctx.mozImageSmoothingEnabled = false;
  ctx.msImageSmoothingEnabled = false;
  
  let animationId = null;
  let animatedPixels = [];
  let lastTime = 0;
  
  const initAnimatedPixels = () => {
    if (!animationEnabled) return;
    
    // Usar aproximadamente 50% de los píxeles para animación (como en el ejemplo)
    const animationCount = Math.floor(coordinates.length * 0.5);
    const shuffled = [...coordinates].sort(() => Math.random() - 0.5);
    
    animatedPixels = shuffled.slice(0, animationCount).map(([x, y]) => ({
      x,
      y,
      // Duraciones más cortas y rangos similares al ejemplo
      duration: 1000 + Math.random() * 2000, // 1-3 segundos
      delay: Math.random() * 4000, // 0-4 segundos delay inicial
      phase: Math.random() * Math.PI * 2,
      cycleStart: 0,
      isPaused: Math.random() > 0.5, // Empezar aleatoriamente pausado o no
      pauseDuration: 1000 + Math.random() * 3000 // Duración de pausa variable
    }));
  };
  
  const draw = (currentTime) => {
    ctx.clearRect(0, 0, canvasWidth, canvasHeight);
    ctx.fillStyle = pixelColor;
    
    const animatedSet = new Set(animatedPixels.map(p => `${p.x},${p.y}`));
    
    coordinates.forEach(([x, y]) => {
      let opacity = 1;
      
      if (animationEnabled) {
        const key = `${x},${y}`;
        if (animatedSet.has(key)) {
          const pixel = animatedPixels.find(p => p.x === x && p.y === y);
          
          if (pixel) {
            const elapsed = currentTime - pixel.cycleStart;
            
            if (pixel.isPaused) {
              // Durante la pausa, mantener opacidad reducida pero no tan baja
              if (elapsed >= pixel.pauseDuration) {
                pixel.isPaused = false;
                pixel.cycleStart = currentTime;
              }
              opacity = 0.8; // Opacidad durante pausa, más alta que antes
            } else {
              // Durante la animación activa
              if (elapsed >= pixel.duration) {
                pixel.isPaused = true;
                pixel.cycleStart = currentTime;
                pixel.pauseDuration = 1000 + Math.random() * 3000; // Nueva duración de pausa
                opacity = 0.8;
              } else {
                // Animación sinusoidal más suave
                const progress = elapsed / pixel.duration;
                const sineValue = 0.55 + 0.25 * Math.sin((progress + pixel.phase) * Math.PI * 2);
                // Rango de opacidad más amplio: 0.3 a 1.0
                opacity = Math.max(0.3, Math.min(1.0, sineValue));
              }
            }
          }
        }
      }
      
      ctx.globalAlpha = opacity;
      ctx.fillRect(Math.floor(x), Math.floor(y), 1, 1);
    });
    
    ctx.globalAlpha = 1;
  };
  
  const animate = (currentTime) => {
    // Limitar a ~30 FPS para mejor performance
    if (currentTime - lastTime < 33.33) {
      animationId = requestAnimationFrame(animate);
      return;
    }
    
    lastTime = currentTime;
    draw(currentTime);
    
    if (animationEnabled) {
      animationId = requestAnimationFrame(animate);
    }
  };
  
  initAnimatedPixels();
  
  const startTime = performance.now();
  animatedPixels.forEach(pixel => {
    pixel.cycleStart = startTime;
  });
  
  if (animationEnabled) {
    animate(startTime);
  } else {
    draw(startTime);
  }
  
  const cleanup = () => {
    if (animationId) {
      cancelAnimationFrame(animationId);
    }
  };
  
  // Manejo de visibilidad para pausar/reanudar animación
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      cleanup();
    } else if (animationEnabled) {
      const currentTime = performance.now();
      animatedPixels.forEach(pixel => {
        pixel.cycleStart = currentTime;
      });
      animate(currentTime);
    }
  });
  
  // Limpiar al desmontar
  window.addEventListener('beforeunload', cleanup);
</script>